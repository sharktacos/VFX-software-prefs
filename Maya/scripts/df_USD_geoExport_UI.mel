//---------------------------------------------------------
/*
 Export geo to USD with support for:
 - Proxy/render display purpose scope names detected from selected heirarchy.
 - Reference geometry (.usdc) into payload file (.usda) which is payloaded into Asset file
 - Custom metadata with originating Maya file “exported_from”
 - Variant switch to display high res mesh in viewport
 - Switch to "_geo" naming convention for mesh file in crate binary.
 - Look file with overs for MaterialX references.
 - Relative texture file paths for MaterialX docs
 
 v5 Export payloaded USD asset with MaterialX reference
 (c) Derek Flood, 2025
 
 
 Usage: Select the root prim to export. Confirm proxy and render groups in file dialog. Enter path and filename for root asset. Export.
 Will create a root asset file and corresponding geom and payload files.
 
 call with:
 source df_USD_geoExport_UI;
 mayaUsd_exportGeo();
 
 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
//---------------------------------------------------------

proc setOptionVars()
{
    //Get the child group names under selected to populate purpose fields
    $sel = `ls -sl`;
    //$dag_root = `substitute "\|" $sel[0] "x"`;
    $dag_root = substituteAllString($sel[0], "|", "");
    $geoGrpPath = `listRelatives -path $sel`;
    $find_groups = `listRelatives $geoGrpPath`;
    $found_render = $find_groups[0];
    $found_proxy = $find_groups[1];

    if (!`optionVar -exists optVar_root`) {
        optionVar -stringValue optVar_root $dag_root;
    }
    
    if (!`optionVar -exists optVar_render`) {
        optionVar -stringValue optVar_render $found_render;
    }

    if (!`optionVar -exists optVar_proxy`) {
        optionVar -stringValue optVar_proxy $found_proxy;
    }

    if (!`optionVar -exists optVar_relativePaths`) {
        optionVar -intValue optVar_relativePaths 1; // Default to selected
    }
}

// creates the options of the File dialog
global proc string df_UISetup(string $parent)
{
    setParent $parent;
    string $layout = `scrollLayout -childResizable true`;

    setParent $layout;
    $title = "Render and Proxy Purpose Scope Names (Detected from selected hierarchy)";
    $frame = `frameLayout -label $title -collapsable false`;
    text -align left -label "";
    textFieldGrp -ed 0 -bgc 0.15 0.15 0.15 -label "Root Prim:" -ann "Derived from selected node."  root_field;
    text -align left -label "           	geo/";
    textFieldGrp -ed 0 -bgc 0.6 0.6 0.6 -label "Render Purpose:" -ann "Derived from children of selected root node."  render_field;
    textFieldGrp -ed 0 -bgc 0.6 0.6 0.6 -label "Proxy Purpose:" -ann "Derived from children of selected root node."  proxy_field;
    
    // Add the checkbox for MaterialX relative texture file paths
    checkBox -label "Convert MaterialX docs to relative texture file paths" -value 1 materialXRelativePathsChkBox;

    return $layout;
}

// UIInit
global proc df_UIInit(string $parent, string $filterType)
{
    setOptionVars();

    string $xpath = `optionVar -q optVar_root`;
    string $rpath = `optionVar -q optVar_render`;
    string $ppath = `optionVar -q optVar_proxy`;
    int $relativePathsEnabled = `optionVar -q optVar_relativePaths`;

    setParent $parent;
    textFieldGrp -e -text $xpath root_field;
    textFieldGrp -e -text $rpath render_field;
    textFieldGrp -e -text $ppath proxy_field;
    checkBox -e -value $relativePathsEnabled materialXRelativePathsChkBox;
}

global proc df_UICommit(string $parent)
{
    setParent $parent;

    // fetch values
    optionVar -stringValue optVar_root (`textFieldGrp -q -text  root_field`);
    optionVar -stringValue optVar_render (`textFieldGrp -q -text  render_field`);
    optionVar -stringValue optVar_proxy (`textFieldGrp -q -text  proxy_field`);
    optionVar -intValue optVar_relativePaths (`checkBox -q -value materialXRelativePathsChkBox`);
}

global proc mayaUsd_exportGeo()
{
    optionVar -remove optVar_root;
    optionVar -remove optVar_render;
    optionVar -remove optVar_proxy;
    optionVar -remove optVar_relativePaths;

    string $sel[] = `ls -sl`;
    int $isSel = `size($sel)`;
    string $workspace = `workspace -rootDirectory -query`;
    string $geoGrp[] = `listRelatives $sel`;
    string $geoGrpPath[] = `listRelatives -path $sel`;
    string $GroupCount[] = `listRelatives -path $geoGrpPath`;
    int $justTwo = `size $GroupCount`;
    
    // Check if nothing is selected
    if (!$isSel) {
        confirmDialog -message "Nothing Selected. Select the root node of your asset." -button "Derp";
        return;
    }

    // Check if a MaterialX stack shape is selected
    string $selType = `nodeType $sel[0]`;
    if ($selType == "materialXStackShape") {
        confirmDialog -message "A MaterialX stack shape is selected. Please select the root node of your asset." -button "Got it";
        return;
    }

    if ($geoGrp[0] != "geo") {
        confirmDialog -message "Missing \"geo\" group. Structure must be \n\nroot/ (asset name)\n   geo/\n      render/ \n      proxy/\n\nNote that \"geo\" must be the exact name for the geometry scope. The render and proxy purpose scopes can be named as desired based on your studio naming conventions. The root prim is typically given the name of the asset. For example \"fruitBowl\" " -button "Got it";
        return;
    }

    if ($justTwo != 2) {
        confirmDialog -message "Just two child groups under \"geo\" please. Render and Proxy, in that order" -button "Sorry";
        return;
    }

    string $filepath[] = `fileDialog2 
                      -dialogStyle 2
                      -fileMode 0
                      -caption "Export selected to USD lookdev asset with referenced MaterialX docs." 
                      -fileFilter "USD Export (*.usd *.usdc *.usda)" 
                      -okCaption "Export" 
                      -dir $workspace 
                      -optionsUICreate "df_UISetup" 
                      -optionsUIInit "df_UIInit" 
                      -optionsUICommit "df_UICommit"`;

    $render_value = `optionVar -q optVar_render`; //pass this value to python
    $proxy_value = `optionVar -q optVar_proxy`; //pass this value to python
    $relativePathsEnabled = `optionVar -q optVar_relativePaths`; //pass this value to python
    $fileName = $filepath[0];
        
    if (size($fileName) > 0){
        python("import df_USD_geoExport; df_USD_geoExport.main('" + $fileName + "', '" + $render_value + "', '" + $proxy_value + "', '" + $relativePathsEnabled + "')");
    }
}

//mayaUsd_exportGeo()